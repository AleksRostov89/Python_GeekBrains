# 7. Реализовать генератор с помощью функций с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact (n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
# начиная с 1! и до п !.
# Подсказка: факториал числа n - произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def  factorial_func ( number : int ):   # Начало функции. функция расчитавает фактриал числа

    factorial_temp  =  1   # переменная, в нее будем записывать рассчитанный факториал

    для  x  в  диапазоне ( 1 , число  +  1 ):   # цикл, расчитывает сам факториал
        print ( f "Для числа: { x } " , end = '' )   # вывод
        factorial_temp  * =  x   # формула расчета

        yield  factorial_temp   # Конец функции. Возвращаем из функции


users_input  =  int ( input ( "Введите число до 10 >>>>" ))   # Начало скрипта. Вводим число (например 4)

для  x  в  factorial_func ( users_input ):   # в цикле будем передовать в функцию числа (1, 2, 3, 4)
    print ( f "факториал равенство: { x } " )   # Конец скрипта. Вывод расчитанного факториала в функции factorial_func
