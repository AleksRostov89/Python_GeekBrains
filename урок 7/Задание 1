# 1. Реализовать класс Матрица (матрица).
# Обеспечить перегрузку конструктора класса (метод init ()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица - система некоторых величин, име в виде прямоугольной математой схемы.
# Примеры матриц:
# 3 на 2: 3 на 3: 2 на 4:
# 31 22 3 5 32 3 5 8 3
# 37 43 2 4 6 8 3 7 1
# 51 86-1 64-8
# Следующий шаг - реализовать перегрузку метода str () для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода add () для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно - первый элемент первой строки первой матрицы складываем
# с первой первой строки второй матрицы и т.д.
#
# Как это работает:
# 1. Через метод __init__ создаем два экземпляра класса Matrix (стр.52 и 57);
# 2. Стр.56 отправляет в метод __add__, где сначала получаем количество строк в мартице (rows_count) и
# количество эелементов в строке (items_count) .Далее создаем новый список (new_value) и в него сразу же при помощи
# цикла перебора строк и вложенного цикла перебора элементов выполняем сложение элементов двух списков (мартриц);
# 3. Полученный новый список возвращаем через создание нового экземпляра класса Matrix (стр.43);
# 4. Таким образом мы создали 3 объекта (списка / мартиц) класса Matrix;
# 5. Стр.64-68 отправляют в медот __str__, где используя join и цикл собираем вывода удаляя не нужные символы;

класс  Matrix :
    значение : список

    def  __init__ ( self , value : list ):
        я . значение  =  значение

    def  __add__ ( себя , другое ):
        rows_count  =  Len ( самостоятельно . значение )
        items_count  =  Len ( самостоятельно . Значение [ 0 ])

        new_value  = [
            [
                я . значение [ строка ] [ idx ] +  другое . значение [ строка ] [ idx ]
                для  idx  в  диапазоне ( items_count )
            ]
            для  строки  в  диапазоне ( rows_count )
        ]

        вернуть  матрицу ( новое_значение )

    def  __str__ ( сам ):
        верните  " \ n " . присоединиться (
            str ( строка ). полоса ( '[]' ). заменить ( ',' , '' )
            для  строки  в  себе . ценность
        )


a  =  Матрица ([
    [ 15 , 14 , 13 ],
    [ 12 , 11 , 10 ],
])

b  =  Матрица ([
    [ 21 , 22 , 23 ],
    [ 24 , 25 , 26 ],
])

с  =  а  +  Ь

печать ( а )
печать ()
печать ( б )
печать ()
печать ( с )
