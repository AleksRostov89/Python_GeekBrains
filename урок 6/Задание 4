# 4.Реализуйте базовый класс Автомобиль.
# У данного класса должны быть следующие атрибуты: скорость, цвет, имя, is_police (булево).
# А также методы: иди, остановись, поверни (направление), которые должны сообщать, что машина поехала,
# остановилась, повернула (куда).
# Опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar.
# Добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля.
# Для классов TownCar и WorkCar переопределите метод show_speed.
# При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
#
# Создайте экземпляры классов, передайте значения атрибутов.
# Выполните доступ к атрибутам, выведите результат.
# Выполните вызов методов и также покажите результат.

класс  Автомобиль :   # родительский класс
    скорость : int
    цвет : str
     имя : ул.
    is_police : bool

    def  __init__ ( я , скорость , цвет , имя , is_police ):   # конструктор объекта
        я . скорость  =  скорость
        я . color  =  цвет
        я . name  =  имя
        я . is_police  =  is_police

    def  go ( self ):   # метод
        return  f "Автомобиль начал движение"

    def  stop ( self ):   # метод
        return  f "Автомобиль остановился"

    def  turn ( self , revers ):   # метод
        return  f "Автомобиль поворачивает на { revers } "

    def  show_speed ( self , speed ):   # метод
    return  f "Автомобиль движется со скоростью: { speed } "


class  TownCar ( Автомобиль ):   # дочерний класс
    def  show_speed ( self ):   # переопределяемый метод
        если  сам . скорость  >  60 :
            print ( f " Скорость { self . speed } !!! Превышение скоростного режима!" )
        еще :
            print ( f "Скорость автомобиля: { self . speed } " )
        print ( f "Автомобиль: { self . name } , цвет: { self . color } , скорость: { self . speed } , это полиция? { self . is_police } " )


class  SportCar ( Автомобиль ):   # дочерний класс
    def  info ( self ):   # метод
     return  f "Автомобиль: { self . name } , цвет: { self . color } , скорость: { self . speed } , это полиция? { self . is_police } "


class  WorkCar ( Автомобиль ):   # дочерний класс
    def  show_speed ( self ):   # переопределяемый метод
        если  сам . скорость  >  40 :
            print ( f " Скорость { self . speed } !!! Превышение скоростного режима!" )
        еще :
            print ( f "Скорость автомобиля: { self . speed } " )
        print ( f "Автомобиль: { self . name } , цвет: { self . color } , скорость: { self . speed } , это полиция? { self . is_police } " )


class  PoliceCar ( Автомобиль ):   # дочерний класс
    def  info ( self ):   # метод
    return  f "Автомобиль: { self . name } , цвет: { self . color } , скорость: { self . speed } , это полиция? { self . is_police } "


car  =  Car ( 60 , "yellow" , "Taxi" , False )   # экземпляр класса Car
печать ( автомобиль . идти ())
печать ( машина . стоп ())
print ( car . turn ( "лево" ))
печать ( автомобиль . show_speed ( 75 ))
печать ()

T_W  =  Towncar ( 90 , "зеленый" , "Ваз-2114" , Ложные )   # экземпляр класса Towncar
t_w . show_speed ()   # вызов метода
печать ()

s_c  =  SportCar ( 350 , «красный» , «Ferrari» , False )   # экземпляр класса SportCar
print ( s_c . info ())   # вызов метода
печать ()

w_k  =  WorkCar ( 39 , "blue" , "Cadillac" , False )   # экземпляр класса WorkCar
w_k . show_speed ()   # вызов метода
печать ()

p_c  =  PoliceCar ( 180 , "черный" , "GM" , True )   # экземпляр класса PoliceCar
print ( p_c . info ())   # вызов метода
