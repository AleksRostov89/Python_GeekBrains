# 3. Создайте собственный класс-исключение, который должен проверять список на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
# введя, например, команду «стоп». При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе типа очередного элемента необходимо реализовать проверку элемента и внести его в список,
# только если введено число. Класс-исключение должен не позволить пользователю достигаемый текст (не исключение число)
# и отображить соответствующее сообщение. При этой работе скрипта не должна завершаться.

class  CheckNumberException ( Исключение ):
    def  __init__ ( себя , ошибки ):
        я . error_text  =  ошибки

    def  __str__ ( сам ):
        вернуть  себя . ошибки


output_list  = []
print ( "Остановить программу можно написав: стоп" )
print ( f "*"  *  40 )
в то время как  True :
    user_input  =  input ( "Введите данные: число или слово >>>>" )

    если  user_input  ==  «стоп»  или  «стоп» :
        print ( f "Список чисел: { output_list } " )
        ломать

    попробуйте :
        если  не  user_input . isnumeric ():
            поднять  CheckNumberException ( f "Введенное слово [ { user_input } ] будет пропущено!" )
        output_list . добавить ( user_input )
    кроме  CheckNumberException  как  ошибка :
        печать ( error . error_text )
