В№4. Начните работу над проектом «Склад оргтехники».
# Создайте класс, описывающий склад.
# А также класс «Оргтехника», который будет базовым для классов-наследников.
# Эти классы - типичные оргтехники (принтер, сканер, ксерокс).
# В базовом классе определить параметры, общие для приведенных типов.
# В классах-наследниках существуют уникальные уникальные для каждого типа оргтехники.
# 5. Продолжить работу над первым заданием.
# Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
# Для хранения данных о наименовании и количестве оргтехники, а также других данных,
# можно использовать любую подходящую структуру, например словарь.
# 6. Продолжить работу над вторым заданием.
# Реализуйте механизм валидации вводимых данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей,
# изученных на уроках по ООП.

class  CheckingTypeExcepion ( Exception ):   # Исключение будет проверять тип у варианта Количество
    def  __init__ ( self ):   # и если он str будет выдавать ошибку и НЕ записывать товар на склад;
        проходят

    def  __str__ ( сам ):
        return  f "ОШИБКА !!! Проверьте параметр 'Количество' = int!"


class  Warehouse :   # склад
    Department  = { '0' : 'Склад' , '1' : 'Отдел финансов' , '2' : 'Отдел кадров' }

    def  __init__ ( сам ):
        я . склад_0  = []
        я . склад_1  = []
        я . склад_2  = []

    def  come_equipment ( self , item ):   # метод приема оргтехники на склад
        попробуйте :
            если  тип ( шт . количество ) ==  int :
                я . склад_0 . добавить ( элемент )
                return  f "На склад поступил товар: [ { item } ]"
            еще :
                поднять  CheckingTypeExcepion ()
        кроме  CheckingTypeExcepion  как  ошибку :
            печать ( ошибка )
        return  f "Товар: [ { item } ] не добавлен на склад!"

    def  outgoing_equipment ( self , item ):   # метод передачи оргтехники в подразделение компании
        user_input  =  input ( "Введите номер отдела для передачи товара: 1 - Отдел финансов, 2 - Отдел кадров >>>" )
        если  user_input  ==  '1' :
            я . склад_1 . добавить ( элемент )
            я . склад_0 . удалить ( элемент )
            возврат  ф "В отдел финансов поступил { лен ( сам . склад_1 ) } товар."
        elif  user_input  ==  '2' :
            я . склад_2 . добавить ( элемент )
            я . склад_0 . удалить ( элемент )
            вернуться  F "в отделе кадров поступили { LEN ( сам . warehouse_2 ) } ТОВАР."
        еще :
            return  f "Неверный номер отдела!"

     отчет def ( сам ):
        число  =  len ( сам . склад_0 )
        num1  =  len ( сам . склад_1 )
        пит2  =  Len ( самостоятельно . warehouse_2 )
        если  num  ==  1 :
            print ( f "На складе храниться { num } оргтехника:" )
        еще :
            print ( f "На складе храниться { num } оргтехники:" )
        для  элемента  в  себе . склад_0 :
            печать ( элемент )
        если  num1  ==  1 :
            печать ( е "В отделе финансов храниться { num1 } оргтехника:" )
        еще :
            печать ( е "В отделе финансов храниться { num1 } оргтехники:" )
        для  элемента  в  себе . склад_1 :
            печать ( элемент )
        если  num2  ==  1 :
          печать ( е "В отделе кадров храниться { пит2 } оргтехника:" )
        еще :
            печать ( е "В отделе кадров храниться { пит2 } оргтехники:" )
        для  элемента  в  себе . склад_2 :
            печать ( элемент )


class  OfficeEquipment :   # оргтехника
    type_equipment : str   # тип техники
    торговая марка : str   # производитель
    цена : int   # цена
    количество : int   # количество

    def  __init__ ( сам , тип_оборудования , марка , цена , количество ):
        я . type_equipment  =  type_equipment
         я . марка  =  марка
        я . цена  =  цена
        я . количество  =  количество

    def  __str__ ( сам ):
        return  f "Тип: { self . type_equipment } , Производитель: { self . brand } ," \
               f "Цена: { self . price } , Количество: { self . amount } "


класс  Принтер ( OfficeEquipment ):
    paper_size : str   # размер бумаги

    def  __init__ ( сам , тип_оборудования , марка , цена , количество , размер_бумаги ):
     супер (). __init__ ( тип_оборудования , марка , цена , количество )
        я . paper_size  =  размер_бумаги

    def  __str__ ( сам ):
        return  f "Тип: { self . type_equipment } , Производитель: { self . brand } , Цена: { self . price } ," \
               f "Количество: { self . количество } , Размер бумаги: { self . paper_size } "


класс  сканеры ( OfficeEquipment ):
    разрешение : int   # разрешение

    def  __init__ ( сам , тип_оборудования , марка , цена , количество , разрешение ):
     супер (). __init__ ( тип_оборудования , марка , цена , количество )
        я . разрешение  =  разрешение

    def  __str__ ( сам ):
        return  f "Тип: { self . type_equipment } , Производитель: { self . brand } , Цена: { self . price } ," \
               f "Количество: { собственное . количество } , Разрешение: { собственное . разрешение } "


класс  Копирование ( OfficeEquipment ):
format : str   # формат А4 или А3

    def  __init__ ( сам , тип_оборудования , марка , цена , количество , формат ):
        супер (). __init__ ( тип_оборудования , марка , цена , количество )
        я . format  =  формат

    def  __str__ ( сам ):
        return  f "Тип: { self . type_equipment } , Производитель: { self . brand } , Цена: { self . price } ," \
               f "Количество: { self . amount } , Формат: { self . format } "


sklad  =  Склад ()

p  =  Принтер ( «Принтер» , «Epson 200» , 25000 , 1 , «A4» )
s  =  сканеры ( "Сканер" , "Mustek 1500" , 15000 , 1 , 1200 )
c  =  Копия ( «Копир» , «Xerox 2021» , 30000 , 1 , «A3» )
y  =  Принтер ( «Принтер» , «Canon 450» , 13000 , «Ошибка» , «A4» )
# вызов метода приема оргтехники на склад
print ( "1. Работа методом приема товара на склад:" )
печать ( склад . прибывающее_оборудование ( п ))
печать ( склад . прибывающее_оборудование ( я ))
печать ( склад . прибывающее_оборудование ( с ))
печать ( склад . прибывающее_оборудование ( у ))
печать ()

print ( "2. Работа методом передачи оргтехники в подразделение компании:" )
склад . отчет ()
печать ()
# вызов метода передачи оргтехники в подразделение компании
печать ( склад . исходящее_оборудование ( п ))
печать ( склад . исходящее_оборудование ( я ))
печать ()
# отчет оргтехника на складах
склад . отчет ()
